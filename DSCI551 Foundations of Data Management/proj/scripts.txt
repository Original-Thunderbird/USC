presentation
other group members will introduce themeslves when its their turn. The motivation of the project is to track the job hunting status of students in CS departments. We use 3 datasets: student, company, specification and will do search and analysis on all of them.
I am in charge of the frontend, but I notice that the peer review doesn't focus much on it so I'll be brief.

This is a uniform frontend for 2 EDFS implementations.
Here, a button will appear in upcoming display, please keep notice.
buttons
Here I will use words from instructors and endorsed answers to further justify my design choice. ... Does file explorer let users do those cd, ls, mkdir command? Does file explorer need user to understand what's patition? no. So we are hiding buttons for ls and partition commands. But where is interface for ls? the whole navigator. Ls is triggered when we add/remove files or change folder, like how file explorer behave. Where are interfaces for partition funcs? Cat and the whole search and analysis part. They are using the two commands, and backend guy will elaborate on that.

Queries.
Here we do tricks and here we have bound for min/max value. That's all for frontend. Please keep notice how it's resembling a file explorer in upcoming parts.















screencast
other group members will introduce themeslves when its their turn.
The motivation of the project is to track the job hunting status of students in CS departments. This may have an extra significance since this fall hiring season is a pretty tough one. So by tracking such status, we may get a sense of what companies are in favor of our CS students, which CS track is the most welcomed in the job market. This may help CS staffs refine their course listings or requirement for each track.

We track 3 entities: student, company, specification

My contributions are building the frontend, architecting the project, giving the idea of the project and sample database, debugging Firebase backend so it normally won't collapse, and leading the team.

1. DB selection
initially neither is selected

2. File explorer
2.1
init dir placed at root
currently no button here
traverse a little bit to display the whole backend
now we have a button 

2.2 pop up
click outside or lcose button

2.3 blank input

2.4 buttons

2.5 ls is not implemented as a button, but will be triggered if current directory or content in directory changes. I think this meets the professor's expectation of a UI resembling file explorer.

2.6 getPartitionLocations & readPartition are hidden intentionally. As the professor says we can't assume the user to have any computer science knowledge, so of course a user doesn't know what partition is, and details about it should be transparent to users. But they are implemented by backend guys and they'll talk about it.

3. query
3.1 student
a finite set of specifications
Field of interest: which field does the user interest in, like parameters followed by SELECT in SQL
Field to count: for analytics, SELECT count(*) GROUP BY

3.2 Company

3.3 Specifications
query by size range
can only be number

4.
for Firebase debugging, I reformatted the cd output here to be same as MySQL, managed to maintain the global current directory, and fixed the routing logic to prevent the backend from collapsing.

These are my displayable contributions and let's move to the next person.
